/* Generated By:JavaCC: Do not edit this line. GLUEQueryParser.java */
package au.edu.sapac.grid.glueschema.transform;

import au.edu.sapac.grid.glueschema.util.GLUEClassMapper;
import au.edu.sapac.grid.glueschema.util.XPathQueryHelper;
import au.edu.sapac.grid.glueschema.transform.GLUERequirement;
import java.io.StringReader;

public class GLUEQueryParser implements GLUEQueryParserConstants {
  private GLUERequirement glueRequirement;
  public static void main(String[] args)
      throws ParseException, TokenMgrError {
    System.out.print("GLUE Schema Query: ");
    GLUEQueryParser parser = new GLUEQueryParser(System.in);
    System.out.println("Equivalent XPath Query: " + parser.parseStdIn());
  }

  final public String parseStdIn() throws ParseException {
        String xpathQuery;
    xpathQuery = parse();
    jj_consume_token(EOL);
        {if (true) return xpathQuery;}
    throw new Error("Missing return statement in function");
  }

  final public String parse() throws ParseException {
        Token entityToBeReturned;
    try {
      Class glueRequirementClass = Class.forName(
        GLUEClassMapper.getClass("SiteRequirement"));
      glueRequirement = (GLUERequirement)glueRequirementClass.newInstance();
    } catch (ClassNotFoundException e) {
      e.printStackTrace();
    } catch (InstantiationException e) {
      e.printStackTrace();
    } catch (IllegalAccessException e) {
      e.printStackTrace();
    }
    jj_consume_token(GET);
    entityToBeReturned = jj_consume_token(GLUEENTITY);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      jj_consume_token(WHERE);
      RequirementCondition();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
        {if (true) return XPathQueryHelper.getXPathForStringEntity(
                        glueRequirement.getXPathQueryString(entityToBeReturned.toString()),
                                        entityToBeReturned.toString());}
    throw new Error("Missing return statement in function");
  }

  final public void RequirementCondition() throws ParseException {
    MixedCondition();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      jj_consume_token(AND);
      MixedCondition();
    }
  }

  final public void MixedCondition() throws ParseException {
    String xpathQuery;
    GLUEQueryCondition condition;
    condition = SingleCondition();
    glueRequirement.processCondition(condition);
  }

  final public void GroupCondition() throws ParseException {
    String glueFieldRestriction;
    GLUEQueryCondition condition;
    String xpathQuery = "";
    Token andOrToken;
    condition = SingleCondition();
    // process the condition and convert to xpath 
    // xpathQuery = something
    // save glueField to the glueFieldRestriction for this GroupCondition
    glueFieldRestriction = condition.getOperand1();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      andOrToken = AndOr();
      condition = SingleCondition();
      if (condition.getOperand1().equals(glueFieldRestriction)) {
        // do some further processing of the current xpath query
        // xpathQuery = new xpath
      }
      else {
        {if (true) throw new ParseException("Group condition does not contain the same GLUE fields");}
      }
    }
  }

  final public GLUEQueryCondition SingleCondition() throws ParseException {
    Token glueFieldToken, relOpToken, glueFieldValueToken;
    String relOp;
    String glueFieldValue;
    GLUEQueryCondition condition;
    glueFieldToken = jj_consume_token(GLUEFIELD);
    relOpToken = RelativeOperator();
    glueFieldValueToken = GlueFieldValues();
    if (glueFieldValueToken.kind == GLUEQueryParserConstants.STRING &&
            !(relOpToken.kind == GLUEQueryParserConstants.EQUAL ||
            relOpToken.kind == GLUEQueryParserConstants.NOTEQUAL ||
            relOpToken.kind == GLUEQueryParserConstants.LIKE)) {
          // then this is not acceptable
          {if (true) throw new ParseException("Error on token column " + relOpToken.beginColumn + ". Only '=' and '!=' operators are allowed for string and boolean comparisons");}
    }
    if ((glueFieldValueToken.kind == GLUEQueryParserConstants.TRUE ||
            glueFieldValueToken.kind == GLUEQueryParserConstants.FALSE) &&
            !(relOpToken.kind == GLUEQueryParserConstants.EQUAL ||
            relOpToken.kind == GLUEQueryParserConstants.NOTEQUAL)) {
          // then this is not acceptable
          {if (true) throw new ParseException("Error on token column " + relOpToken.beginColumn + ". Only '=' and '!=' operators are allowed for boolean comparisons");}
    }
    {if (true) return new GLUEQueryCondition(glueFieldToken.toString(), relOpToken.toString(), glueFieldValueToken.toString());}
    throw new Error("Missing return statement in function");
  }

  final public Token AndOr() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      t = jj_consume_token(AND);
    {if (true) return t;}
      break;
    case OR:
      t = jj_consume_token(OR);
    {if (true) return t;}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Token RelativeOperator() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GREATERTHAN:
      t = jj_consume_token(GREATERTHAN);
    {if (true) return t;}
      break;
    case LESSERTHAN:
      t = jj_consume_token(LESSERTHAN);
    {if (true) return t;}
      break;
    case EQUAL:
      t = jj_consume_token(EQUAL);
    {if (true) return t;}
      break;
    case NOTEQUAL:
      t = jj_consume_token(NOTEQUAL);
    {if (true) return t;}
      break;
    case LIKE:
      t = jj_consume_token(LIKE);
    {if (true) return t;}
      break;
    case GREATEROREQUAL:
      t = jj_consume_token(GREATEROREQUAL);
    {if (true) return t;}
      break;
    case LESSEROREQUAL:
      t = jj_consume_token(LESSEROREQUAL);
    {if (true) return t;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Token GlueFieldValues() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      t = jj_consume_token(TRUE);
    {if (true) return t;}
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
    {if (true) return t;}
      break;
    case STRING:
      t = jj_consume_token(STRING);
    {if (true) return t;}
      break;
    case NUMBER:
      t = jj_consume_token(NUMBER);
    {if (true) return t;}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  public GLUEQueryParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x40,0x8,0x18,0x18,0x3f80,0x198000,};
   }

  public GLUEQueryParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public GLUEQueryParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GLUEQueryParserTokenManager(this, jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  public GLUEQueryParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GLUEQueryParserTokenManager(this, jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  public GLUEQueryParser(GLUEQueryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  public void ReInit(GLUEQueryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[25];
    for (int i = 0; i < 25; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 25; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
